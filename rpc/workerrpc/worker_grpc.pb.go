// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: rpc/workerrpc/worker.proto

package workerrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WorkerService_WhoAmI_FullMethodName        = "/WorkerService/WhoAmI"
	WorkerService_HealthScore_FullMethodName   = "/WorkerService/HealthScore"
	WorkerService_HealthMetrics_FullMethodName = "/WorkerService/HealthMetrics"
	WorkerService_AddTask_FullMethodName       = "/WorkerService/AddTask"
	WorkerService_TerminateTask_FullMethodName = "/WorkerService/TerminateTask"
	WorkerService_GetTasks_FullMethodName      = "/WorkerService/GetTasks"
)

// WorkerServiceClient is the client API for WorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkerServiceClient interface {
	WhoAmI(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WWhoAmIResponse, error)
	HealthScore(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthScoreResponse, error)
	HealthMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthMetricResponse, error)
	AddTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*AddTaskResponse, error)
	TerminateTask(ctx context.Context, in *TerminateTaskRequest, opts ...grpc.CallOption) (*TerminateTaskResponse, error)
	GetTasks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RunningTasks, error)
}

type workerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkerServiceClient(cc grpc.ClientConnInterface) WorkerServiceClient {
	return &workerServiceClient{cc}
}

func (c *workerServiceClient) WhoAmI(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*WWhoAmIResponse, error) {
	out := new(WWhoAmIResponse)
	err := c.cc.Invoke(ctx, WorkerService_WhoAmI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) HealthScore(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthScoreResponse, error) {
	out := new(HealthScoreResponse)
	err := c.cc.Invoke(ctx, WorkerService_HealthScore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) HealthMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthMetricResponse, error) {
	out := new(HealthMetricResponse)
	err := c.cc.Invoke(ctx, WorkerService_HealthMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) AddTask(ctx context.Context, in *Task, opts ...grpc.CallOption) (*AddTaskResponse, error) {
	out := new(AddTaskResponse)
	err := c.cc.Invoke(ctx, WorkerService_AddTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) TerminateTask(ctx context.Context, in *TerminateTaskRequest, opts ...grpc.CallOption) (*TerminateTaskResponse, error) {
	out := new(TerminateTaskResponse)
	err := c.cc.Invoke(ctx, WorkerService_TerminateTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) GetTasks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RunningTasks, error) {
	out := new(RunningTasks)
	err := c.cc.Invoke(ctx, WorkerService_GetTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServiceServer is the server API for WorkerService service.
// All implementations must embed UnimplementedWorkerServiceServer
// for forward compatibility
type WorkerServiceServer interface {
	WhoAmI(context.Context, *emptypb.Empty) (*WWhoAmIResponse, error)
	HealthScore(context.Context, *emptypb.Empty) (*HealthScoreResponse, error)
	HealthMetrics(context.Context, *emptypb.Empty) (*HealthMetricResponse, error)
	AddTask(context.Context, *Task) (*AddTaskResponse, error)
	TerminateTask(context.Context, *TerminateTaskRequest) (*TerminateTaskResponse, error)
	GetTasks(context.Context, *emptypb.Empty) (*RunningTasks, error)
	mustEmbedUnimplementedWorkerServiceServer()
}

// UnimplementedWorkerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorkerServiceServer struct {
}

func (UnimplementedWorkerServiceServer) WhoAmI(context.Context, *emptypb.Empty) (*WWhoAmIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoAmI not implemented")
}
func (UnimplementedWorkerServiceServer) HealthScore(context.Context, *emptypb.Empty) (*HealthScoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthScore not implemented")
}
func (UnimplementedWorkerServiceServer) HealthMetrics(context.Context, *emptypb.Empty) (*HealthMetricResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthMetrics not implemented")
}
func (UnimplementedWorkerServiceServer) AddTask(context.Context, *Task) (*AddTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (UnimplementedWorkerServiceServer) TerminateTask(context.Context, *TerminateTaskRequest) (*TerminateTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateTask not implemented")
}
func (UnimplementedWorkerServiceServer) GetTasks(context.Context, *emptypb.Empty) (*RunningTasks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (UnimplementedWorkerServiceServer) mustEmbedUnimplementedWorkerServiceServer() {}

// UnsafeWorkerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkerServiceServer will
// result in compilation errors.
type UnsafeWorkerServiceServer interface {
	mustEmbedUnimplementedWorkerServiceServer()
}

func RegisterWorkerServiceServer(s grpc.ServiceRegistrar, srv WorkerServiceServer) {
	s.RegisterService(&WorkerService_ServiceDesc, srv)
}

func _WorkerService_WhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).WhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerService_WhoAmI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).WhoAmI(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_HealthScore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).HealthScore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerService_HealthScore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).HealthScore(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_HealthMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).HealthMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerService_HealthMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).HealthMetrics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerService_AddTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).AddTask(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_TerminateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).TerminateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerService_TerminateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).TerminateTask(ctx, req.(*TerminateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).GetTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorkerService_GetTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).GetTasks(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkerService_ServiceDesc is the grpc.ServiceDesc for WorkerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "WorkerService",
	HandlerType: (*WorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WhoAmI",
			Handler:    _WorkerService_WhoAmI_Handler,
		},
		{
			MethodName: "HealthScore",
			Handler:    _WorkerService_HealthScore_Handler,
		},
		{
			MethodName: "HealthMetrics",
			Handler:    _WorkerService_HealthMetrics_Handler,
		},
		{
			MethodName: "AddTask",
			Handler:    _WorkerService_AddTask_Handler,
		},
		{
			MethodName: "TerminateTask",
			Handler:    _WorkerService_TerminateTask_Handler,
		},
		{
			MethodName: "GetTasks",
			Handler:    _WorkerService_GetTasks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/workerrpc/worker.proto",
}
