// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: rpc/builderrpc/builder.proto

package builderrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BuilderService_WhoAmI_FullMethodName             = "/BuilderService/WhoAmI"
	BuilderService_BuildRaw_FullMethodName           = "/BuilderService/BuildRaw"
	BuilderService_BuildSpec_FullMethodName          = "/BuilderService/BuildSpec"
	BuilderService_BuildHealthMetrics_FullMethodName = "/BuilderService/BuildHealthMetrics"
)

// BuilderServiceClient is the client API for BuilderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuilderServiceClient interface {
	WhoAmI(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BWhoAmIResponse, error)
	BuildRaw(ctx context.Context, in *BuildRawRequest, opts ...grpc.CallOption) (*BuildRawResponse, error)
	BuildSpec(ctx context.Context, in *BuildSpecRequest, opts ...grpc.CallOption) (*BuildSpecResponse, error)
	BuildHealthMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BuildHealthResponse, error)
}

type builderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBuilderServiceClient(cc grpc.ClientConnInterface) BuilderServiceClient {
	return &builderServiceClient{cc}
}

func (c *builderServiceClient) WhoAmI(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BWhoAmIResponse, error) {
	out := new(BWhoAmIResponse)
	err := c.cc.Invoke(ctx, BuilderService_WhoAmI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderServiceClient) BuildRaw(ctx context.Context, in *BuildRawRequest, opts ...grpc.CallOption) (*BuildRawResponse, error) {
	out := new(BuildRawResponse)
	err := c.cc.Invoke(ctx, BuilderService_BuildRaw_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderServiceClient) BuildSpec(ctx context.Context, in *BuildSpecRequest, opts ...grpc.CallOption) (*BuildSpecResponse, error) {
	out := new(BuildSpecResponse)
	err := c.cc.Invoke(ctx, BuilderService_BuildSpec_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *builderServiceClient) BuildHealthMetrics(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BuildHealthResponse, error) {
	out := new(BuildHealthResponse)
	err := c.cc.Invoke(ctx, BuilderService_BuildHealthMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BuilderServiceServer is the server API for BuilderService service.
// All implementations must embed UnimplementedBuilderServiceServer
// for forward compatibility
type BuilderServiceServer interface {
	WhoAmI(context.Context, *emptypb.Empty) (*BWhoAmIResponse, error)
	BuildRaw(context.Context, *BuildRawRequest) (*BuildRawResponse, error)
	BuildSpec(context.Context, *BuildSpecRequest) (*BuildSpecResponse, error)
	BuildHealthMetrics(context.Context, *emptypb.Empty) (*BuildHealthResponse, error)
	mustEmbedUnimplementedBuilderServiceServer()
}

// UnimplementedBuilderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBuilderServiceServer struct {
}

func (UnimplementedBuilderServiceServer) WhoAmI(context.Context, *emptypb.Empty) (*BWhoAmIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhoAmI not implemented")
}
func (UnimplementedBuilderServiceServer) BuildRaw(context.Context, *BuildRawRequest) (*BuildRawResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildRaw not implemented")
}
func (UnimplementedBuilderServiceServer) BuildSpec(context.Context, *BuildSpecRequest) (*BuildSpecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildSpec not implemented")
}
func (UnimplementedBuilderServiceServer) BuildHealthMetrics(context.Context, *emptypb.Empty) (*BuildHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuildHealthMetrics not implemented")
}
func (UnimplementedBuilderServiceServer) mustEmbedUnimplementedBuilderServiceServer() {}

// UnsafeBuilderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuilderServiceServer will
// result in compilation errors.
type UnsafeBuilderServiceServer interface {
	mustEmbedUnimplementedBuilderServiceServer()
}

func RegisterBuilderServiceServer(s grpc.ServiceRegistrar, srv BuilderServiceServer) {
	s.RegisterService(&BuilderService_ServiceDesc, srv)
}

func _BuilderService_WhoAmI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServiceServer).WhoAmI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuilderService_WhoAmI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServiceServer).WhoAmI(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuilderService_BuildRaw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildRawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServiceServer).BuildRaw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuilderService_BuildRaw_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServiceServer).BuildRaw(ctx, req.(*BuildRawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuilderService_BuildSpec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BuildSpecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServiceServer).BuildSpec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuilderService_BuildSpec_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServiceServer).BuildSpec(ctx, req.(*BuildSpecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BuilderService_BuildHealthMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BuilderServiceServer).BuildHealthMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BuilderService_BuildHealthMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BuilderServiceServer).BuildHealthMetrics(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BuilderService_ServiceDesc is the grpc.ServiceDesc for BuilderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BuilderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BuilderService",
	HandlerType: (*BuilderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WhoAmI",
			Handler:    _BuilderService_WhoAmI_Handler,
		},
		{
			MethodName: "BuildRaw",
			Handler:    _BuilderService_BuildRaw_Handler,
		},
		{
			MethodName: "BuildSpec",
			Handler:    _BuilderService_BuildSpec_Handler,
		},
		{
			MethodName: "BuildHealthMetrics",
			Handler:    _BuilderService_BuildHealthMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/builderrpc/builder.proto",
}
